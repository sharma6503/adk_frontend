#!/usr/bin/env node

/**
 * Quick Setup Script for Cloud Run Backend
 * 
 * This script helps you quickly configure your frontend to connect to a Cloud Run backend.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

console.log('üöÄ ADK Frontend Cloud Run Setup');
console.log('================================\n');

async function setup() {
  try {
    console.log('This script will help you configure your frontend to connect to your Cloud Run backend.\n');
    
    // Get Cloud Run URL from user
    const cloudRunUrl = await question('Enter your Cloud Run service URL (e.g., https://your-service-abc123-uc.a.run.app): ');
    
    if (!cloudRunUrl || !cloudRunUrl.startsWith('https://')) {
      console.log('‚ùå Invalid URL. Cloud Run URLs should start with https://');
      process.exit(1);
    }
    
    // Create .env.local file
    const envPath = path.join(__dirname, 'nextjs', '.env.local');
    const envContent = `# ADK Frontend Environment Configuration
# Generated by setup-cloudrun.js on ${new Date().toISOString()}

# CloudRun Backend Configuration
CLOUD_RUN_SERVICE_URL=${cloudRunUrl}

# Development mode
NODE_ENV=development
`;
    
    // Check if .env.local already exists
    if (fs.existsSync(envPath)) {
      const overwrite = await question('\n.env.local already exists. Overwrite it? (y/N): ');
      if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
        console.log('‚ùå Setup cancelled. Existing .env.local file was not modified.');
        process.exit(1);
      }
    }
    
    // Write the file
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ Created ${envPath}`);
    
    // Test the configuration
    console.log('\nüîß Testing configuration...');
    
    // Set environment variable for this process
    process.env.CLOUD_RUN_SERVICE_URL = cloudRunUrl;
    process.env.NODE_ENV = 'development';
    
    // Test backend connection
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);
      
      const response = await fetch(`${cloudRunUrl}/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'ADK-Setup-Script'
        },
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (response.ok) {
        console.log('‚úÖ Backend connection successful!');
        console.log(`   Status: ${response.status} ${response.statusText}`);
      } else {
        console.log('‚ö†Ô∏è  Backend responded with error status:');
        console.log(`   Status: ${response.status} ${response.statusText}`);
        console.log('   This might be normal if your backend expects specific endpoints.');
      }
    } catch (error) {
      console.log('‚ùå Could not connect to backend:');
      console.log(`   Error: ${error.message}`);
      console.log('   Please verify your Cloud Run URL is correct and the service is running.');
    }
    
    // Success message
    console.log('\nüéâ Setup complete!');
    console.log('\nNext steps:');
    console.log('1. Start the frontend: cd nextjs && npm run dev');
    console.log('2. Open http://localhost:3000 in your browser');
    console.log('3. Check the browser console for configuration logs');
    console.log('\nIf you need to change the URL later, edit nextjs/.env.local');
    
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

setup();
